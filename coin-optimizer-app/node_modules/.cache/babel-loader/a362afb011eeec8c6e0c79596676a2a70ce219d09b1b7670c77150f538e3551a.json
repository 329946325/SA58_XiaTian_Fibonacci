{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from 'react';\nconst App = () => {\n  _s();\n  const [targetAmount, setTargetAmount] = useState('');\n  const [coinDenominations, setCoinDenominations] = useState('');\n  const [optimizedCoins, setOptimizedCoins] = useState([]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const formData = {\n      targetAmount: parseFloat(targetAmount),\n      coinDenominations: coinDenominations.split(',').map(denomination => parseFloat(denomination.trim()))\n    };\n    try {\n      const response = await fetch('http://localhost:8080/api/coins/optimize', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      console.log('Response from server:', data); // Log the response for debugging\n\n      // Update state to display the optimized coins\n      setOptimizedCoins(data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      // Handle error (display error message, retry logic, etc.)\n    }\n  };\n};\n_s(App, \"xYia8bGlt+qU+rWWZoR9RkVIbo4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","App","_s","targetAmount","setTargetAmount","coinDenominations","setCoinDenominations","optimizedCoins","setOptimizedCoins","handleSubmit","e","preventDefault","formData","parseFloat","split","map","denomination","trim","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","console","log","error","_c","$RefreshReg$"],"sources":["F:/Program Files (x86)/Java/coin-optimizer-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst App = () => {\n  const [targetAmount, setTargetAmount] = useState('');\n  const [coinDenominations, setCoinDenominations] = useState('');\n  const [optimizedCoins, setOptimizedCoins] = useState([]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const formData = {\n      targetAmount: parseFloat(targetAmount),\n      coinDenominations: coinDenominations.split(',').map(denomination => parseFloat(denomination.trim())),\n    };\n\n    try {\n      const response = await fetch('http://localhost:8080/api/coins/optimize', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n\n      const data = await response.json();\n      console.log('Response from server:', data); // Log the response for debugging\n\n      // Update state to display the optimized coins\n      setOptimizedCoins(data);\n\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      // Handle error (display error message, retry logic, etc.)\n    }\n  };\n\n};\n\nexport default App;\n\n\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACK,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAMS,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,MAAMC,QAAQ,GAAG;MACfT,YAAY,EAAEU,UAAU,CAACV,YAAY,CAAC;MACtCE,iBAAiB,EAAEA,iBAAiB,CAACS,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,YAAY,IAAIH,UAAU,CAACG,YAAY,CAACC,IAAI,CAAC,CAAC,CAAC;IACrG,CAAC;IAED,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;QACvEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,QAAQ;MAC/B,CAAC,CAAC;MAEF,IAAI,CAACM,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEH,IAAI,CAAC,CAAC,CAAC;;MAE5C;MACAnB,iBAAiB,CAACmB,IAAI,CAAC;IAEzB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C;IACF;EACF,CAAC;AAEH,CAAC;AAAC7B,EAAA,CAtCID,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AAwCT,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}